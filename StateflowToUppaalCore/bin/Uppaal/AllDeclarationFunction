int GetStackTopInfo()
{
    return mExecutionStack[mExecutionStackTop].mInfo;
}

int GetStackTopDest()
{
    return mExecutionStack[mExecutionStackTop].mDest;
}

bool JVSETrigger()
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent == eTrigger;
}

bool JTopStackInValid()
{
    return mExecutionStackTop&gt;=0 &amp;&amp; !mExecutionStack[mExecutionStackTop].mValid;
}

void PushOneEvent(int event,int dest,int destCPosition,int info,bool valid,int automatonType,int cEPosition,int pahse)
{
    int stateid = dest;
    if (dest == -1)
    {
        return;
    }
    mExecutionStackTop++;
    mExecutionStack[mExecutionStackTop].mEvent = event;
    mExecutionStack[mExecutionStackTop].mDest = dest;
    mExecutionStack[mExecutionStackTop].mDestCPosition = destCPosition;
    mExecutionStack[mExecutionStackTop].mInfo = info;
    mExecutionStack[mExecutionStackTop].mValid = valid;
    mExecutionStack[mExecutionStackTop].mAutomatonType = automatonType;
    mExecutionStack[mExecutionStackTop].mCEPosition = cEPosition;
    mExecutionStack[mExecutionStackTop].mPahse = pahse;
}

void PopOneEvent()
{
    mExecutionStackTop--;
}

//may be unused.
//too many state to verify.
//state space explosion.
void InvalidAllEventsRelatedWithStateId(int stateid)
{
    int i = mExecutionStackTop;
    while (i &gt;= 0)
    {
        if (mExecutionStack[i].mDest == stateid)
        {
             mExecutionStack[i].mValid = false;
        }
    }
}

void MSEAutoDest(int autoState)
{
    mExecutionStack[mExecutionStackTop].mDest = autoState;
}

void MSEAutoType(int autoType)
{
    mExecutionStack[mExecutionStackTop].mAutomatonType = autoType;
}

void MSEAutoInfo(int autoInfo)
{
    mExecutionStack[mExecutionStackTop].mInfo = autoInfo;
}

void ResetControllerActionAutomaton(int stateid)
{
    PushOneEvent(eTransToStateDirectly,stateid,-1,iTransOnlyBack,true,aControllerActionAutomaton,-1,-1);
}

void ResetCommonAutomaton(int stateid)
{
    PushOneEvent(eTransToStateDirectly,stateid,-1,iTransOnlyBack,true,aCommonAutomaton,-1,-1);
}

void ResetConditionAutomaton(int stateid,int childstateid)
{
    PushOneEvent(eTransToStateDirectly,stateid,childstateid,-1,true,aConditionalAutomaton ,-1,-1);
}

void RecordTopStackInfoAndPopUp()
{
    mStackTopDestChildRecord = mExecutionStack[mExecutionStackTop].mDestCPosition;
    // &amp;&amp; mExecutionStack[mExecutionStackTop].mInfo &gt; 0; the judge concat to the back of the following judgement.
    if ((mExecutionStack[mExecutionStackTop].mEvent == eActivation || mExecutionStack[mExecutionStackTop].mEvent == eDeActivation))
    {
        mStackTopEventIdRecord = mExecutionStack[mExecutionStackTop].mInfo;
    }
    else
    {
        if (mExecutionStack[mExecutionStackTop].mEvent &gt;= vValidEventBase)
        {
            mStackTopEventIdRecord = mExecutionStack[mExecutionStackTop].mEvent;
        }
        else
        {
            mStackTopEventIdRecord = -1;
        }
    }
    PopOneEvent();
}

void RecordTopStackInfoAndNotPopUp()
{
    mStackTopDestChildRecord = mExecutionStack[mExecutionStackTop].mDestCPosition;
    // &amp;&amp; mExecutionStack[mExecutionStackTop].mInfo &gt; 0; the judge concat to the back of the following judgement.
    if ((mExecutionStack[mExecutionStackTop].mEvent == eActivation || mExecutionStack[mExecutionStackTop].mEvent == eDeActivation))
    {
        mStackTopEventIdRecord = mExecutionStack[mExecutionStackTop].mInfo;
    }
    else
    {
        if (mExecutionStack[mExecutionStackTop].mEvent &gt;= vValidEventBase)
        {
            mStackTopEventIdRecord = mExecutionStack[mExecutionStackTop].mEvent;
        }
        else
        {
            mStackTopEventIdRecord = -1;
        }
    }
}

void DispatchInstantEvent(int event,int dest,int autotype)
{
	PushOneEvent(event,dest,-1,-1,true,autotype,-1,-1);
}

void DispatchFuncEvent(int event,int dest,int info)
{
    PushOneEvent(event,dest,-1,info,true,aControllerAutomaton,-1,-1);
}

void DispatchEvent(int event,int dest,int info,int automaton)
{
    PushOneEvent(event,dest,-1,info,true,automaton,-1,-1);
}

void DispatchControllerEventJudgeDuplicate(int event,int dest,int info)
{
    if (mExecutionStackTop &lt; 0 || (mExecutionStack[mExecutionStackTop].mDest != dest &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent != event))
    {
        PushOneEvent(event,dest,-1,info,true,aControllerAutomaton,-1,-1);
    }
}

void PathTryDelEvtIfOver(int parentstate,int trystate,int pathlen)
{
    if (mExecutionStack[mExecutionStackTop].mInfo == 0)
    {
        PushOneEvent(eTransToStateDirectly,parentstate,trystate,-1,true,aConditionalAutomaton,-1,-1);
    }
    mExecutionStack[mExecutionStackTop].mAutomatonType = aConditionalAutomaton;
    mExecutionStack[mExecutionStackTop].mInfo++;
    if (mExecutionStack[mExecutionStackTop].mInfo == pathlen)
    {
        PopOneEvent();
    }
}
//Functions commonly used by controller.

//Activation Helper Function
//Stack Top Judge if Activation is On Stack(should not be consumed).
bool JVSAO(int stateid,int automatonType)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mValid &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == stateid &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent == eActivation &amp;&amp; mExecutionStack[mExecutionStackTop].mInfo &lt; 0 &amp;&amp; mExecutionStack[mExecutionStackTop].mAutomatonType == automatonType;
}

//Judge if Activation should be stopped.
bool JVSAH(int automatonType)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mValid &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == mActStopStateID &amp;&amp; mExecutionStack[mExecutionStackTop].mAutomatonType == automatonType;
}

bool JVSAL(int stateid,int automatonType)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mValid &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == stateid &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent == eActivation &amp;&amp; mExecutionStack[mExecutionStackTop].mInfo &gt;= 0 &amp;&amp; mExecutionStack[mExecutionStackTop].mAutomatonType == automatonType;
}

//Stack Top Judge if Activation should be Consumed(Leaved).

//active stop dispatching events.
void ActivationStopDispatch(bool nativeactive)
{
	if (nativeactive)
	{
		PopOneEvent();
	}
}

//Modified OnStack state to Consumed(Leaved)
void MSO2L()
{
    if (mExecutionStack[mExecutionStackTop].mInfo &lt; 0)
    {
        mExecutionStack[mExecutionStackTop].mInfo = -mExecutionStack[mExecutionStackTop].mInfo;
    }
}

//DeActivation Helper Function
//Stack Top Judge if Activation is On Stack(should not be consumed).
bool JVSDaO(int stateid,int automatonType)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mValid &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == stateid &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent == eDeActivation &amp;&amp; mExecutionStack[mExecutionStackTop].mInfo &lt; 0 &amp;&amp; mExecutionStack[mExecutionStackTop].mAutomatonType == automatonType;
}

bool JVSDaH(int automatonType)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mValid &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == mExecutionStack[mExecutionStackTop].mInfo &amp;&amp; mExecutionStack[mExecutionStackTop].mAutomatonType == automatonType;
}

//Stack Top Judge if Activation should be Consumed(Leaved).
bool JVSDaL(int stateid,int automatonType)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mValid &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == stateid &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent == eDeActivation &amp;&amp; mExecutionStack[mExecutionStackTop].mInfo &gt;= 0 &amp;&amp; mExecutionStack[mExecutionStackTop].mAutomatonType == automatonType;
}

bool JVSTD(int parentstateid,int automatonType)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mValid &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == parentstateid &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent == eTransToStateDirectly &amp;&amp; mExecutionStack[mExecutionStackTop].mAutomatonType == automatonType;
}

bool JVT2I(int parentstateid,int automatonType)
{
    return JVSTD(parentstateid,automatonType);
    //JVSDaL(parentstateid,automatonType) || 
}

bool JVI2T(int parentstateid,int uppaalorsfstateid,int automatonType)
{
    return JVSTD(parentstateid,automatonType) &amp;&amp; mExecutionStack[mExecutionStackTop].mDestCPosition == uppaalorsfstateid;
}

bool JVSE2MForAll(int stateid,int automatonType)
{
	return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == stateid &amp;&amp; mExecutionStack[mExecutionStackTop].mValid &amp;&amp; mExecutionStack[mExecutionStackTop].mAutomatonType == automatonType;
}

bool NotDeactiveAndActiveRelatedEvents()
{
	return mExecutionStack[mExecutionStackTop].mEvent != eActivation &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent != eDeActivation &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent != eExitActionOver;
}

bool JVSE2M(int stateid,int automatonType)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == stateid &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent &gt;= vValidEventBase &amp;&amp; mExecutionStack[mExecutionStackTop].mValid &amp;&amp; mExecutionStack[mExecutionStackTop].mAutomatonType == automatonType;
}

bool JVSEF(int evtid)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent == evtid;
}

bool JVSEF2M(int stateid,int evtid,int automatonType)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == stateid &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent == evtid &amp;&amp; mExecutionStack[mExecutionStackTop].mValid &amp;&amp; mExecutionStack[mExecutionStackTop].mAutomatonType == automatonType;
}

bool JVSEDestPos(int destcpos)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mDestCPosition == destcpos;
}

void DelEvtIfOnlyBack()
{
    if (mExecutionStack[mExecutionStackTop].mEvent == eTransToStateDirectly &amp;&amp; mExecutionStack[mExecutionStackTop].mInfo == iTransOnlyBack)
    {
        PopOneEvent();
    }
}

//question:
//mDeactStopStateID does this should put into stack frame?????
//deacive
void Deactive(int begindeactiveid,int stopdeactiveid)
{
    PushOneEvent(eDeActivation,begindeactiveid,-1,-stopdeactiveid,true,aControllerAutomaton,-1,-1);
}

//question:
//mActStopStateID does this should put into stack frame?????
//active
void Active(int beginactiveid,int stopactiveid)
{
	int info = -1;
	if (mStackTopEventIdRecord &gt;= vValidEventBase)
	{
		info = -mStackTopEventIdRecord;
	}
	if (mExecutionStackTop &lt; 0)
	{
		info = -eTrigger;
	}
    PushOneEvent(eActivation,beginactiveid,-1,info,true,aControllerAutomaton,-1,-1);
    mActStopStateID = stopactiveid;
}

bool JNSEDispatchToSelfController(int stateid)
{
    return mExecutionStackTop&gt;=0 &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent == eDispathToSelfLogic &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == stateid &amp;&amp; mExecutionStack[mExecutionStackTop].mInfo == -1 &amp;&amp; mExecutionStack[mExecutionStackTop].mValid &amp;&amp; mExecutionStack[mExecutionStackTop].mAutomatonType == aControllerAutomaton;
}

void MNSESelfLogicOver(bool nativeactive)
{
    //pop up eDispatchToSelfLogic event if have.
    int info = mExecutionStack[mExecutionStackTop].mInfo;
    if (mExecutionStack[mExecutionStackTop].mEvent == eDispathToSelfLogic)
    {
        PopOneEvent();
    }
    if (!nativeactive)
    {
        PopOneEvent();
    }
    else
    {
    	DispatchEvent(eSelfLogicOver,GetStackTopDest(),info,aControllerAutomaton);
    }
}

void FirstRoundEventDispatchHandle(bool hasControllerAction, int stateid, bool parentparallel, bool childparallel, int activechildid)
{
    bool runduring = false;
    if (mExecutionStack[mExecutionStackTop].mInfo &lt; 0)
    {
        mExecutionStack[mExecutionStackTop].mInfo = -1;
        DispatchEvent(eDispathToSelfLogic,stateid,-1,aControllerAutomaton);
        runduring = true;
    }
    else
    {
        if (mExecutionStack[mExecutionStackTop].mInfo != stateid)
        {
            if (!childparallel)
            {
                if (activechildid == mExecutionStack[mExecutionStackTop].mInfo)
                {
                    mExecutionStack[mExecutionStackTop].mInfo = -1;
                    DispatchEvent(eDispathToSelfLogic,stateid,-1,aControllerAutomaton);
                }
                else
                {
                    PopOneEvent();
                }
            }
            else
            {
                mExecutionStack[mExecutionStackTop].mDest = mExecutionStack[mExecutionStackTop].mInfo;
            }
        }
        else
        {
            runduring = true;
            if (parentparallel)
            {
                mExecutionStack[mExecutionStackTop].mInfo = iOnlyToThisState;
                DispatchEvent(eDispathToSelfLogic,stateid,iOnlyToThisState,aControllerAutomaton);
            }
            else
            {
                mExecutionStack[mExecutionStackTop].mInfo = -1;
                DispatchEvent(eDispathToSelfLogic,stateid,-1,aControllerAutomaton);
            }
        }
    }
    if (hasControllerAction &amp;&amp; runduring)
    {
        PushOneEvent(eDuring,stateid,-1,-1,true,aControllerActionAutomaton,-1,-1);
        PushOneEvent(eTransToStateDirectly,stateid,-1,iTransOnlyBack,true,aControllerActionAutomaton,-1,-1);
    }
}

bool JNSESelfLogicOver(int stateid)
{
    return JVSE2MForAll(stateid,aControllerAutomaton) &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent == eSelfLogicOver;
}

void MNSEDispatchToSelfLogic(bool nativeactive,int parentstateid,bool isChildSequence,bool hasControllerAction,bool isLoseControl)
{
    //pop up during judge over if have.
    if (mExecutionStack[mExecutionStackTop].mEvent == eDispathToSelfLogic &amp;&amp; mExecutionStack[mExecutionStackTop].mDest == parentstateid)
    {
        PopOneEvent();
    }
    if (!nativeactive)
    {
        PopOneEvent();
    }
    else
    {
        if (mExecutionStack[mExecutionStackTop].mInfo &lt; 0 &amp;&amp; isChildSequence &amp;&amp; !isLoseControl)
        {
        	//let this driven event run by common automaton.
            MSEAutoType(aCommonAutomaton);
        }
        else
        {
            MNSESelfLogicOver(nativeactive);
        }
    }
}

void MNSEDispatchToChild(int childstateid,bool haschild)
{
    int event = -1;
    int stateid  = -1;
    int info = -1;
    PopOneEvent();
    //pop eSelfLogicOver.
    //this function is invoked before the below function and must be invoked imediately just after self logic is over.
    stateid  = mExecutionStack[mExecutionStackTop].mDest;
    event = mExecutionStack[mExecutionStackTop].mEvent;
    info = mExecutionStack[mExecutionStackTop].mInfo;
    //here don't pop up the driven event
    if (childstateid != -1)
    {
        DispatchEvent(eChildOver,stateid,info,aControllerAutomaton);
        if (info &lt; 0)
        {
        	info = -1;
        }
        DispatchEvent(event,childstateid,info,aControllerAutomaton);
    }
    else
    {
    	DispatchEvent(eChildOver,stateid,info,aControllerAutomaton);
    }
}

void MNSEDispatchToParallel(int nextstateid)
{
	int event = -1;
    int info = -1;
    //pop up child judge over if have.
    if (mExecutionStack[mExecutionStackTop].mEvent == eChildOver)
    {
        PopOneEvent();
    }
    event = mExecutionStack[mExecutionStackTop].mEvent;
    info = mExecutionStack[mExecutionStackTop].mInfo;
    PopOneEvent();
    //here pop up the driven event.
    if (nextstateid != -1 &amp;&amp; info != iOnlyToThisState)
    {
        DispatchEvent(event,nextstateid,info,aControllerAutomaton);
    }
}

void GenerateDrivenEvent(int chartid)
{
    PushOneEvent(eTrigger,chartid,-1,-1,true,aControllerAutomaton,-1,-1);
}

bool IsStackEmpty()
{
    return mExecutionStackTop &lt;= -1;
}

void HandleeDefaultActivation(bool parallel,int firstchildstateid)
{
    int drivenevent = mExecutionStack[mExecutionStackTop].mInfo;
    int parentstateid = mExecutionStack[mExecutionStackTop].mDest;
    PopOneEvent();
    if (parallel)
    {
        DispatchControllerEventJudgeDuplicate(eActivation,firstchildstateid,drivenevent);
    }
    else
    {
        DispatchEvent(drivenevent,parentstateid,iActivationDrivenEvent,aCommonAutomaton);
    }
}

void ChildStateFunction(bool haschilds,bool parallel,int firstchildstateid)
{
    int drivenevent = mExecutionStack[mExecutionStackTop].mInfo;
    int parentstateid = mExecutionStack[mExecutionStackTop].mDest;
    PopOneEvent();
    if (!haschilds)
    {
    	return;
    }
    if (parallel)
    {
        DispatchControllerEventJudgeDuplicate(eActivation,firstchildstateid,drivenevent);
    }
    else
    {
        if (mExecutionStack[mExecutionStackTop].mEvent != eActivation)
        {
            DispatchEvent(eDefaultActivation,parentstateid,drivenevent,aControllerAutomaton);
        }
    }
}

void ChildStateFunctionWithoutConsiderPreviousEvent(bool shoulddefaultactivation,bool haschilds,bool parallel,int firstchildstateid,int drivenevent,int parentstateid)
{
	if (!haschilds)
    {
    	return;
    }
    if (parallel)
    {
        DispatchControllerEventJudgeDuplicate(eActivation,firstchildstateid,drivenevent);
    }
    else
    {
        if (shoulddefaultactivation)
        {
            DispatchEvent(eDefaultActivation,parentstateid,drivenevent,aControllerAutomaton);
        }
    }
}

//This function is invoked in the process of activation.
//And because when activation the state must be deactive.
//So transfer to child state is always harmless.
//Even the state is on specified state wanted to transferred,This function still doesn't have harm.
void MVToCStateDirectly(int parentstateid,int pCEstateid,int autoType)
{
    if (parentstateid == -1)
    {
        return;
    }
    PushOneEvent(eTransToStateDirectly,parentstateid,pCEstateid,-1,true,autoType,-1,0);
}

//Firstly should delete eActivation event.
void HandleeActivation(int parentid,bool active,bool parallel,bool haschild,bool resetcommontodest,bool hasentry,int firstchildstateid)
{
    int drivenevent = mExecutionStack[mExecutionStackTop].mInfo;
    int stateid = mExecutionStack[mExecutionStackTop].mDest;
    if (active)
    {
        if (haschild)
        {
            ChildStateFunction(haschild,parallel,firstchildstateid);
        }
        else
        {
            PopOneEvent();
        }
    }
    else
    {
    	PopOneEvent();
        DispatchEvent(eActiveChild,stateid,drivenevent,aControllerAutomaton);
        if (hasentry)
        {
            DispatchInstantEvent(eActivation,stateid,aControllerActionAutomaton);
        }
        if (resetcommontodest)
        {
            MVToCStateDirectly(parentid,stateid,aCommonAutomaton);
        }
    }
}

void HandleeActiveChild(bool parentparllel,bool haschilds,bool parallel,int firstchildstateid)
{
    int drivenevent = mExecutionStack[mExecutionStackTop].mInfo;
    int stateid = mExecutionStack[mExecutionStackTop].mDest;
    bool shoulddefaultactivatoin = true;
    PopOneEvent();
    if (mExecutionStackTop &gt;= 0 &amp;&amp; mExecutionStack[mExecutionStackTop].mEvent == eActivation)
    {
        shoulddefaultactivatoin = false;
    }
    //pop up eActiveChild event, ChildStateFunction will pop up the event.
    if (parentparllel)
    {
        DispatchEvent(eActiveParallel,stateid,drivenevent,aControllerAutomaton);
    }
    ChildStateFunctionWithoutConsiderPreviousEvent(shoulddefaultactivatoin,haschilds,parallel,firstchildstateid,drivenevent,stateid);
}

void HandleeActiveParallel(int nextstateid)
{
    int drivenevent = mExecutionStack[mExecutionStackTop].mInfo;
    PopOneEvent();
    if (nextstateid != -1)
    {
    	DispatchControllerEventJudgeDuplicate(eActivation,nextstateid,drivenevent);
    }
}

//the following two function are all on stack, so info is negative.
void HandleSimpleDeactivation(int parentid)
{
    int stopid = -mExecutionStack[mExecutionStackTop].mInfo;
    PopOneEvent();
    if (stopid != parentid)
    {
        DispatchEvent(eDeActivation,parentid,stopid,aControllerAutomaton);
        //this dispatch to parent, so dispatch leave stack event.
    }
}

void HandleSimpleActivationOnStack(int parentid, int nowstateid)
{
    int drivenevent = mExecutionStack[mExecutionStackTop].mInfo;
    mExecutionStack[mExecutionStackTop].mInfo = -drivenevent;
    if (!JVSAH(aControllerAutomaton))
    {
        PushOneEvent(eActivation, parentid, nowstateid, drivenevent, true, aControllerAutomaton,-1,-1);
    }
}

void HandleSimpleActivationLeaveStack(int parentid, int nowstateid)
{
    PopOneEvent();
    MVToCStateDirectly(parentid,nowstateid,aCommonAutomaton);
}

void HandleInactiveInDeactivation(bool parentparallel,bool hasprevious,int previousid,int parentid)
{
    int stopid = mExecutionStack[mExecutionStackTop].mInfo;
    PopOneEvent();
    if (parentparallel &amp;&amp; hasprevious)
    {
        //sent to previous.
        DispatchEvent(eDeActivation,previousid,-stopid,aControllerAutomaton);
    }
    else
    {
        if (stopid != parentid)
        {
            DispatchEvent(eDeActivation,parentid,stopid,aControllerAutomaton);
            //this dispatch to parent, so dispatch leave stack event.
        }
    }
}

void HandleActiveInDeactivation(bool hasexitaction,bool haschild,bool parallel)
{
    int stopid = mExecutionStack[mExecutionStackTop].mInfo;
    int stateid = mExecutionStack[mExecutionStackTop].mDest;
    PopOneEvent();
    DispatchEvent(eExitActionOver,stateid,stopid,aControllerAutomaton);
    if (haschild &amp;&amp; !parallel)
    {
        ResetCommonAutomaton(stateid);
    }
    if (hasexitaction)
    {
    	DispatchEvent(eDeActivation,stateid,stopid,aControllerActionAutomaton);
    	ResetControllerActionAutomaton(stateid);
    }
}

void HandleeExitActionOver(bool parentparallel,bool hasprevious,int previousid,int parentid)
{
    int stopid = mExecutionStack[mExecutionStackTop].mInfo;
    int stateid = mExecutionStack[mExecutionStackTop].mDest;
    PopOneEvent();
    //pop up eExitActionOver event.
    //InvalidAllEventsRelatedWithStateId(stateid);
    if (parentparallel &amp;&amp; hasprevious)
    {
        DispatchEvent(eDeActivation,previousid,-stopid,aControllerAutomaton);
    }
    else
    {
    	if (stopid != parentid)
        {
            DispatchEvent(eDeActivation,parentid,stopid,aControllerAutomaton);
            //this dispatch to parent, so dispatch leave stack event.
        }
    }
}

void CommonActionEventConsumed(bool parentparentchildparallel,bool istargetstate)
{
    if (mExecutionStack[mExecutionStackTop].mInfo == iActivationDrivenEvent)
    {
        if (istargetstate)
        {
            RecordTopStackInfoAndPopUp();
        }
        else
        {
            RecordTopStackInfoAndNotPopUp();
        }
    }
    else
    {
        if (parentparentchildparallel)
        {
            RecordTopStackInfoAndNotPopUp();
            if (istargetstate)
            {
                DispatchEvent(eChildOver,GetStackTopDest(),GetStackTopInfo(),aControllerAutomaton);
            }
        }
        else
        {
            if (istargetstate)
            {
                RecordTopStackInfoAndPopUp();
            }
            else
            {
                RecordTopStackInfoAndNotPopUp();
            }
        }
    }
}